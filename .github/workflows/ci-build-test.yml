name: "CI: Build & Test"

on:
  workflow_call:
    inputs:
      build_version:
        required: true
        type: string
    secrets:
      SNYK_TOKEN:
        required: true
      YTTOKEN:
        required: true
  workflow_dispatch:

env:
  UPSTREAM_GITHUB_REPOSITORY: "mxpv/podsync"                         # Upstream repo

jobs:
  quick-build:
    runs-on: ubuntu-latest
    outputs:
      imagename: ${{ env.imagename }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      -
        name: Prepare
        id: prep
        run: |
          IMAGENAME="ttl.sh/$(uuidgen | tr '[:upper:]' '[:lower:]'):3h"
          echo "imagename=${IMAGENAME}" >> $GITHUB_ENV
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4fd812986e6c8c2a69e18311145f9371337f27d4 # v3
      -
        name: Build and export
        id: build
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5
        with:
          context: .
          push: true
          tags: ${{ env.imagename }}
          build-args: |
            UPSTREAM_VERSION=${{ inputs.build_version }}

  snyk-scan:
    needs: [quick-build]
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      -
        name: Pull docker image
        id: load
        run: |
          docker pull ${{needs.quick-build.outputs.imagename}}
      -
        name: Test the image with Snyk for high-severity vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{needs.quick-build.outputs.imagename}}
          args: --file=Dockerfile --severity-threshold=high

  function-test:
    needs: [quick-build]
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      -
        name: Pull docker image
        id: load
        run: |
          docker pull ${{needs.quick-build.outputs.imagename}}
      -
        name: Test docker image
        id: test
        env:
          YTTOKEN : ${{secrets.YTTOKEN}}
          TESTIMAGE: "${{needs.quick-build.outputs.imagename}}"
        shell: bash
        run: |
          test/test.sh
